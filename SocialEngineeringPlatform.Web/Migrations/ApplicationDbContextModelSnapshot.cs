// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialEngineeringPlatform.Web.Data;

#nullable disable

namespace SocialEngineeringPlatform.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2ec0da4a-9c5a-4e4b-9969-0d94e8e18320",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "a80015e12-3913-453c-980f-268ec79224c4",
                            Name = "CampaignManager",
                            NormalizedName = "CAMPAIGNMANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualStartTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAutoSend")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("LandingPageTemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MailTemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ScheduledSendTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SendBatchDelaySeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TargetGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TrackOpens")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LandingPageTemplateId");

                    b.HasIndex("MailTemplateId");

                    b.HasIndex("TargetGroupId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.CampaignTarget", b =>
                {
                    b.Property<int>("CampaignId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("SendStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SendTime")
                        .HasColumnType("TEXT");

                    b.HasKey("CampaignId", "TargetUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("CampaignTargets");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.DbSmtpSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EncryptedPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FromDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Host")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SmtpSettings");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.LandingPageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CollectFieldsConfig")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HtmlContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("LandingPageTemplates");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.MailSendLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CampaignId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SendTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("SmtpServerUsed")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TargetUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("MailSendLogs");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.MailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomFromAddress")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomFromDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("MailTemplates");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.MailTemplateCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MailTemplateCategories");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.TargetGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TargetGroups");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.TargetUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CustomField1")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomField2")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GroupId");

                    b.ToTable("TargetUsers");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.TrackingEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CampaignId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventDetails")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EventTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("LandingPageTemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MailTemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("LandingPageTemplateId");

                    b.HasIndex("MailTemplateId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("TrackingEvents");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.Campaign", b =>
                {
                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedCampaigns")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.LandingPageTemplate", "LandingPageTemplate")
                        .WithMany("Campaigns")
                        .HasForeignKey("LandingPageTemplateId");

                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.MailTemplate", "MailTemplate")
                        .WithMany("Campaigns")
                        .HasForeignKey("MailTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.TargetGroup", "TargetGroup")
                        .WithMany()
                        .HasForeignKey("TargetGroupId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LandingPageTemplate");

                    b.Navigation("MailTemplate");

                    b.Navigation("TargetGroup");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.CampaignTarget", b =>
                {
                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.Campaign", "Campaign")
                        .WithMany("CampaignTargets")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.TargetUser", "TargetUser")
                        .WithMany("CampaignTargets")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.LandingPageTemplate", b =>
                {
                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedLandingPageTemplates")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.MailSendLog", b =>
                {
                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.Campaign", "Campaign")
                        .WithMany("MailSendLogs")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.TargetUser", "TargetUser")
                        .WithMany("MailSendLogs")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.MailTemplate", b =>
                {
                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.MailTemplateCategory", "Category")
                        .WithMany("MailTemplates")
                        .HasForeignKey("CategoryId");

                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedMailTemplates")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.TargetUser", b =>
                {
                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.TargetGroup", "Group")
                        .WithMany("TargetUsers")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.TrackingEvent", b =>
                {
                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.Campaign", "Campaign")
                        .WithMany("TrackingEvents")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.LandingPageTemplate", "LandingPageTemplate")
                        .WithMany("TrackingEvents")
                        .HasForeignKey("LandingPageTemplateId");

                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.MailTemplate", "MailTemplate")
                        .WithMany("TrackingEvents")
                        .HasForeignKey("MailTemplateId");

                    b.HasOne("SocialEngineeringPlatform.Web.Models.Core.TargetUser", "TargetUser")
                        .WithMany("TrackingEvents")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("LandingPageTemplate");

                    b.Navigation("MailTemplate");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.ApplicationUser", b =>
                {
                    b.Navigation("CreatedCampaigns");

                    b.Navigation("CreatedLandingPageTemplates");

                    b.Navigation("CreatedMailTemplates");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.Campaign", b =>
                {
                    b.Navigation("CampaignTargets");

                    b.Navigation("MailSendLogs");

                    b.Navigation("TrackingEvents");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.LandingPageTemplate", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("TrackingEvents");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.MailTemplate", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("TrackingEvents");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.MailTemplateCategory", b =>
                {
                    b.Navigation("MailTemplates");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.TargetGroup", b =>
                {
                    b.Navigation("TargetUsers");
                });

            modelBuilder.Entity("SocialEngineeringPlatform.Web.Models.Core.TargetUser", b =>
                {
                    b.Navigation("CampaignTargets");

                    b.Navigation("MailSendLogs");

                    b.Navigation("TrackingEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
